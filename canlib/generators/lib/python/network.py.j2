from enum import IntEnum, IntFlag
from struct import pack, unpack
from typing import Any

def int8(value: Any) -> int:
    return int(value)

def uint8(value: Any) -> int:
    return int(value)

def int16(value: Any) -> int:
    return int(value)

def uint16(value: Any) -> int:
    return int(value)

def int32(value: Any) -> int:
    return int(value)

def uint32(value: Any) -> int:
    return int(value)

def int64(value: Any) -> int:
    return int(value)

def uint64(value: Any) -> int:
    return int(value)

def float32(value: Any) -> float:
    return float(value)

def float64(value: Any) -> float:
    return float(value)

def bool(value: Any) -> bool:
    return bool(value)


# Bitsets

{% for bit_set in schema.bit_sets -%}
class {{ bit_set.name }}(IntFlag):
{%- if bit_set.items %}
{%- for name in bit_set.items %}
    {{ name }} = {{ 2**loop.index0 }}
{%- endfor %}
{%- else %}
    pass
{%- endif %}

{% endfor -%}

# Enums

{% for enum in schema.enums -%}
class {{ enum.name }}(IntEnum):
{%- for name in enum.items %}
    {{ name }} = {{ loop.index0 }}
{%- endfor %}

{% endfor -%}

# Messages

{% for message in schema.messages %}
class message_{{ message.name }}:
    def __init__(
        self{% if message.fields %},{% endif %}
{%- for field in message.fields %}
        {{ field.name }} = None{% if not loop.last %},{% endif -%}
{%- endfor %}
    ):
    {%- if message.fields %}
        {%- for field in message.fields %}
        self.{{ field.name }} = {{ field.type.name }}({{ field.name }}) if {{ field.name }} is not None else None
        {%- endfor %}
    {%- endif %}
        self.size = {{ message.size }}
    {%- if message.frequency != -1 %}
        self.frequency = {{ message.frequency }}
    {%- endif %}

    def __eq__(self, other):
        if not isinstance(other, message_{{ message.name }}):
            return False
        {%- for field in message.fields %}
        if self.{{ field.name }} != other.{{ field.name }}:
            return False
        {%- endfor %}
        return True

{% if message.has_conversions -%}
class message_{{ message.name }}_conversion:
    pass

def raw_to_conversion_{{ message.name }}(raw: message_{{ message.name }}) -> message_{{ message.name }}_conversion:
    conversion = message_{{ message.name }}_conversion()
{%- for field in message.fields %}
{%- if field.conversion == None %}
    conversion.{{ field.name }} = raw.{{ field.name }}
{%- else %}
    conversion.{{ field.name }} = {{ get_deconversion(field.conversion, "raw." + field.name) }}
{%- endif %}
{%- endfor %}
    return conversion

def conversion_to_raw_{{ message.name }}(conversion: message_{{ message.name }}_conversion) -> message_{{ message.name }}:
    raw = message_{{ message.name }}()
{%- for field in message.fields -%}
{%- if field.conversion == None %}
    raw.{{ field.name }} = conversion.{{ field.name }}
{%- else %}
    raw.{{ field.name }} = {{get_conversion(field.conversion, "conversion." + field.name) }}
{%- endif %}
{%- endfor %}
    return raw
{%- endif %}

def serialize_{{ message.name }}(message: message_{{ message.name }}) -> bytearray:
    data = bytearray()
    data.extend({{ serialize(network, message) }})
    return data

def deserialize_{{ message.name }}(data: bytearray) -> message_{{ message.name }}:
    message = message_{{ message.name }}()
{%- for name, field in deserialize(network, message).items() %}
    message.{{ name }} = {{ field }}
{%- endfor %}
    return message

{% endfor -%}
