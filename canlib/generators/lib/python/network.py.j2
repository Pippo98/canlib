from __future__ import annotations
from enum import IntEnum, IntFlag
from struct import pack, unpack
from typing import Any, Optional
from builtins import bool as Bool

def int8(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def uint8(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def int16(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def uint16(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def int32(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def uint32(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def int64(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def uint64(value: Any) -> Optional[int]:
    return int(value) if value is not None else None

def float32(value: Any) -> Optional[float]:
    return float(value) if value is not None else None

def float64(value: Any) -> Optional[float]:
    return float(value) if value is not None else None

def bool(value: Any) -> Optional[Bool]:
    return Bool(value) if value is not None else None


# Bitsets

{% for bit_set in schema.bit_sets -%}
{%- if bit_set.items %}
class {{ bit_set.name }}(IntFlag):
{%- for name in bit_set.items %}
    {{ name }} = {{ 2**loop.index0 }}
{%- endfor %}

    @classmethod
    def _missing_(cls, value):
        if value is None:
            return cls(0)
        return super(IntFlag, cls)._missing_(value)
{%- endif %}

{% endfor -%}

# Enums

{% for enum in schema.enums -%}
{%- if enum.items %}
class {{ enum.name }}(IntEnum):
{%- for name in enum.items %}
    {{ name }} = {{ loop.index0 }}
{%- endfor %}

    @classmethod
    def _missing_(cls, _):
        return cls(0)
{%- endif %}

{% endfor -%}

# Messages

{% for message in schema.messages %}
class message_{{ message.name }}:
    def __init__(
        self{% if message.fields %},{% endif %}
{%- for field in message.fields %}
        {{ field.name }} = None{% if not loop.last %},{% endif -%}
{%- endfor %}
    ):
    {%- if message.fields %}
        {%- for field in message.fields %}
        self.{{ field.name }} = {{ field.type.name }}({{ field.name }})
        {%- endfor %}
    {%- endif %}
        self.size = {{ message.byte_size }}
    {%- if message.interval != -1 %}
        self.interval = {{ message.interval }}
    {%- endif %}

    def __eq__(self, other):
        if not isinstance(other, message_{{ message.name }}):
            return False
        {%- for field in message.fields %}
        if self.{{ field.name }} != other.{{ field.name }}:
            return False
        {%- endfor %}
        return True

    def serialize(self) -> bytearray:
        data = bytearray()
        data.extend({{ serialize(network, message) }})
        return data

    @classmethod
    def deserialize(cls, data: bytearray):
        message = cls()
    {%- for name, field in deserialize(network, message).items() %}
        message.{{ name }} = {{ field }}
    {%- endfor %}
        return message

{% if message.has_conversions %}
    def convert(self) -> message_{{ message.name }}_conversion:
        conversion = message_{{ message.name }}_conversion()
    {%- for field in message.fields %}
    {%- if field.conversion == None %}
        conversion.{{ field.name }} = self.{{ field.name }}
    {%- else %}
        conversion.{{ field.name }} = {{ get_deconversion(field.conversion, "self." + field.name) }}
    {%- endif %}
    {%- endfor %}
        return conversion


class message_{{ message.name }}_conversion:
    def __init__(
        self{% if message.fields %},{% endif %}
{%- for field in message.fields %}
        {{ field.name }} = None{% if not loop.last %},{% endif -%}
{%- endfor %}
    ):
    {%- if message.fields %}
        {%- for field in message.fields %}
        {%- if field.conversion == None %}
        self.{{ field.name }} = {{ field.type.name }}({{ field.name }})
        {%- else %}
        self.{{ field.name }} = {{ field.conversion.converted_type.name }}({{ field.name }})
        {%- endif %}
        {%- endfor %}
    {%- endif %}
        self.size = {{ message.byte_size }}
    {%- if message.interval != -1 %}
        self.interval = {{ message.interval }}
    {%- endif %}

    def __eq__(self, other):
        if not isinstance(other, message_{{ message.name }}):
            return False
        {%- for field in message.fields %}
        if self.{{ field.name }} != other.{{ field.name }}:
            return False
        {%- endfor %}
        return True

    def convert_to_raw(self) -> message_{{ message.name }}:
        raw = message_{{ message.name }}()
    {%- for field in message.fields -%}
    {%- if field.conversion == None %}
        raw.{{ field.name }} = self.{{ field.name }}
    {%- else %}
        raw.{{ field.name }} = {{get_conversion(field.conversion, "self." + field.name) }}
    {%- endif %}
    {%- endfor %}
        return raw
{% endif %}
{%- endfor %}
